From 0904717b559dd3d8b58f7c5843238f2deafdb430 Mon Sep 17 00:00:00 2001
From: Pavel Macenauer <pavel.macenauer@nxp.com>
Date: Sun, 24 Jan 2021 20:35:38 +0100
Subject: [PATCH] AIR-3570 Disabled code which causes pyarmnn cross-compile failures on yocto/arm64

There are 2 issues which cause cross-compilation to fail in the Yocto environment, and the upstream code
is not yet supporting cross-compiliation, thus some code needs disabled to work around this.

a) Checking the Arm NN version requires to call GetVersion from a lib targetted for the same platform
as it is being compiled on, which is not available when cross-compiling.
b) The Python setuptools.Extension module appends the argument -R to GCC to define explicit link paths,
which is unknown to ARM GCC, so we only declare the libs to link and expect, that they can be found in
default link dirs.

Signed-off-by: Pavel Macenauer <pavel.macenauer@nxp.com>
---
Upstream-Status: Inappropriate [other] - fixes specific issues to Yocto cross-compile environment which 
are not suitable for upstreaming
Signed-off-by: Pavel Macenauer <pavel.macenauer@nxp.com>
 python/pyarmnn/setup.py | 105 +++++++++++++++++++++-------------------
 1 file changed, 56 insertions(+), 49 deletions(-)

diff --git a/python/pyarmnn/setup.py b/python/pyarmnn/setup.py
index ac6ee24b5..5dccee6a2 100755
--- a/python/pyarmnn/setup.py
+++ b/python/pyarmnn/setup.py
@@ -61,10 +61,11 @@ class ArmnnVersionCheckerExtBuilder(build_ext):
             self.failed_ext.append(ext)
             logger.warning('Failed to build extension %s. \n %s', ext.name, str(err))
 
-        if ext.name == 'pyarmnn._generated._pyarmnn_version':
-            sys.path.append(os.path.abspath(os.path.join(self.build_lib, str(Path(ext._file_name).parent))))
-            from _pyarmnn_version import GetVersion
-            check_armnn_version(GetVersion(), __arm_ml_version__)
+        # Removed due to cross-compilation, we cannot check version using a binary for a different platform
+        # if ext.name == 'pyarmnn._generated._pyarmnn_version':
+        #     sys.path.append(os.path.abspath(os.path.join(self.build_lib, str(Path(ext._file_name).parent))))
+        #     from _pyarmnn_version import GetVersion
+        #     check_armnn_version(GetVersion(), __arm_ml_version__)
 
     def copy_extensions_to_source(self):
 
@@ -73,24 +74,25 @@ class ArmnnVersionCheckerExtBuilder(build_ext):
         super().copy_extensions_to_source()
 
 
-def linux_gcc_name():
-    """Returns the name of the `gcc` compiler. Might happen that we are cross-compiling and the
-    compiler has a longer name.
+# Disabled because it returns an unknown compiler name when cross-compiling on Yocto
+# def linux_gcc_name():
+#     """Returns the name of the `gcc` compiler. Might happen that we are cross-compiling and the
+#     compiler has a longer name.
     
-    Args:
-        None
+#     Args:
+#         None
 
-    Returns:
-        str: Name of the `gcc` compiler or None
-    """
-    cc_env = os.getenv('CC')
-    if cc_env is not None:
-        if subprocess.Popen([cc_env, "--version"], stdout=subprocess.DEVNULL):
-            return cc_env
-    return "gcc" if subprocess.Popen(["gcc", "--version"], stdout=subprocess.DEVNULL) else None
+#     Returns:
+#         str: Name of the `gcc` compiler or None
+#     """
+#     cc_env = os.getenv('CC')
+#     if cc_env is not None:
+#         if subprocess.Popen([cc_env, "--version"], stdout=subprocess.DEVNULL):
+#             return cc_env
+#     return "gcc" if subprocess.Popen(["gcc", "--version"], stdout=subprocess.DEVNULL) else None
 
 
-def linux_gcc_lib_search(gcc_compiler_name: str = linux_gcc_name()):
+def linux_gcc_lib_search(gcc_compiler_name: str = None):
     """Calls the `gcc` to get linker default system paths.
     
     Args:
@@ -102,15 +104,17 @@ def linux_gcc_lib_search(gcc_compiler_name: str = linux_gcc_name()):
     Raises:
         RuntimeError: If unable to find GCC.
     """
-    if gcc_compiler_name is None:
-        raise RuntimeError("Unable to find gcc compiler")
-    cmd1 = subprocess.Popen([gcc_compiler_name, "--print-search-dirs"], stdout=subprocess.PIPE)
-    cmd2 = subprocess.Popen(["grep", "libraries"], stdin=cmd1.stdout,
-                         stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
-    cmd1.stdout.close()
-    out, _ = cmd2.communicate()
-    out = out.decode("utf-8").split('=')
-    return tuple(out[1].split(':')) if len(out) > 0 else None
+    # Disabled because it returns an unknown compiler name when cross-compiling on Yocto
+    # if gcc_compiler_name is None:
+    #     raise RuntimeError("Unable to find gcc compiler")
+    # cmd1 = subprocess.Popen([gcc_compiler_name, "--print-search-dirs"], stdout=subprocess.PIPE)
+    # cmd2 = subprocess.Popen(["grep", "libraries"], stdin=cmd1.stdout,
+    #                      stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
+    # cmd1.stdout.close()
+    # out, _ = cmd2.communicate()
+    # out = out.decode("utf-8").split('=')
+    # return tuple(out[1].split(':')) if len(out) > 0 else None
+    return None
 
 
 def find_includes(armnn_include_env: str = INCLUDE_ENV_NAME):
@@ -182,8 +186,10 @@ class LazyArmnnFinderExtension(Extension):
         self._runtime_library_dirs = None
         self._armnn_libs = armnn_libs
         # self.__swig_opts = None
-        super().__init__(name, sources, include_dirs, define_macros, undef_macros, library_dirs, libraries,
-                         runtime_library_dirs, extra_objects, extra_compile_args, extra_link_args, export_symbols,
+        # library_dirs and runtime_library_dirs are not passed, because they
+        # invoke -R argument which causes errors when cross-compiling using using ARM GCC
+        super().__init__(name, sources, include_dirs, define_macros, undef_macros, None, libraries,
+                         None, extra_objects, extra_compile_args, extra_link_args, export_symbols,
                          language, optional, **kw)
 
     @property
@@ -194,31 +200,32 @@ class LazyArmnnFinderExtension(Extension):
     def include_dirs(self, include_dirs):
         self._include_dirs = include_dirs
 
-    @property
-    def library_dirs(self):
-        library_dirs = self._library_dirs
-        for lib in self._armnn_libs:
-            _, lib_path = find_armnn(lib)
-            library_dirs = library_dirs + lib_path
+    # These invoke -R argument which causes errors when cross-compiling using ARM GCC
+    # @property
+    # def library_dirs(self):
+    #     library_dirs = self._library_dirs
+    #     for lib in self._armnn_libs:
+    #         _, lib_path = find_armnn(lib)
+    #         library_dirs = library_dirs + lib_path
 
-        return library_dirs
+    #     return library_dirs
 
-    @library_dirs.setter
-    def library_dirs(self, library_dirs):
-        self._library_dirs = library_dirs
+    # @library_dirs.setter
+    # def library_dirs(self, library_dirs):
+    #     self._library_dirs = library_dirs
 
-    @property
-    def runtime_library_dirs(self):
-        library_dirs = self._runtime_library_dirs
-        for lib in self._armnn_libs:
-            _, lib_path = find_armnn(lib)
-            library_dirs = library_dirs + lib_path
+    # @property
+    # def runtime_library_dirs(self):
+    #     library_dirs = self._runtime_library_dirs
+    #     for lib in self._armnn_libs:
+    #         _, lib_path = find_armnn(lib)
+    #         library_dirs = library_dirs + lib_path
 
-        return library_dirs
+    #     return library_dirs
 
-    @runtime_library_dirs.setter
-    def runtime_library_dirs(self, runtime_library_dirs):
-        self._runtime_library_dirs = runtime_library_dirs
+    # @runtime_library_dirs.setter
+    # def runtime_library_dirs(self, runtime_library_dirs):
+    #     self._runtime_library_dirs = runtime_library_dirs
 
     @property
     def libraries(self):
-- 
2.29.1.windows.1

